// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "Estefania Sack",
            "url": "https://github.com/EstefiS/uala-challenge",
            "email": "support@example.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/timeline": {
            "get": {
                "description": "Returns a list of the most recent tweets from users the current user follows.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Timeline"
                ],
                "summary": "Get Timeline",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the user whose timeline is being requested",
                        "name": "X-User-ID",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A list of tweets",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/domain.Tweet"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized (missing X-User-ID header)",
                        "schema": {
                            "$ref": "#/definitions/http.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/http.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/tweets": {
            "post": {
                "description": "Allows an authenticated user to post a new message (tweet).",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tweets"
                ],
                "summary": "Publish a Tweet",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the user publishing the tweet",
                        "name": "X-User-ID",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Tweet Content",
                        "name": "tweet",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/http.PublishTweetRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Tweet created successfully",
                        "schema": {
                            "$ref": "#/definitions/domain.Tweet"
                        }
                    },
                    "400": {
                        "description": "Bad request (e.g., tweet too long, invalid JSON)",
                        "schema": {
                            "$ref": "#/definitions/http.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized (missing X-User-ID header)",
                        "schema": {
                            "$ref": "#/definitions/http.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/http.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/{id}/follow": {
            "post": {
                "description": "The current user (identified by X-User-ID) starts following another user (identified by their ID in the URL).",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Follow a User",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the user performing the action",
                        "name": "X-User-ID",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "ID of the user to follow",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully followed user",
                        "schema": {
                            "$ref": "#/definitions/http.StatusResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized (missing X-User-ID header)",
                        "schema": {
                            "$ref": "#/definitions/http.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/http.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "domain.Tweet": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "text": {
                    "type": "string"
                },
                "userID": {
                    "type": "string"
                }
            }
        },
        "http.ErrorResponse": {
            "type": "object",
            "properties": {
                "error_code": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "http.PublishTweetRequest": {
            "type": "object",
            "required": [
                "text"
            ],
            "properties": {
                "text": {
                    "type": "string",
                    "maxLength": 280
                }
            }
        },
        "http.StatusResponse": {
            "type": "object",
            "properties": {
                "status": {
                    "type": "string",
                    "example": "ok"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/api/v1",
	Schemes:          []string{},
	Title:            "Uala Challenge - Microblogging API",
	Description:      "This is an API for a microblogging platform, similar to Twitter, built with Go and Hexagonal Architecture..",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
